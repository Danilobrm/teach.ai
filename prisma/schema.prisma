generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  password         String
  email            String        @unique
  dailyStudyTime   Int?          // Tempo de estudo diário em minutos (opcional)
  studyTrackId     String       // Chave estrangeira para a trilha de estudos
  studyPlans       StudyPlan[]
  studyTrack       StudyTrack   @relation(fields: [studyTrackId], references: [id])
  quizProgress     UserQuizProgress[] // Relacionamento com o progresso do quiz
  role             String
}

model StudyTrack {
  id          String         @id @default(uuid())
  title       String         // Nome da trilha de estudos
  description String?        // Descrição da trilha de estudos
  modules     StudyModule[]  // Módulos associados a essa trilha

  User User[] 
}

model Content {
  id          String      @id @default(uuid())
  title       String      
  description String  

  quizzes Quiz[]   
  StudyModule StudyModule[]
  Topic Topic[]
  Subject Subject[]
}

model StudyModule {
  id          String       @id @default(uuid())
  trackId     String       // Chave estrangeira para a trilha de estudos
  track       StudyTrack   @relation(fields: [trackId], references: [id])

  contentId   String
  content     Content      @relation(fields: [contentId], references: [id])
  studyPlans  StudyPlan[]  // Relacionamento com StudyPlan
  subjects    Subject[] // Lista de conteúdos gerados associados a este módulo
}

model Subject {
  id          String      @id @default(uuid())
  contentId   String
  content     Content      @relation(fields: [contentId], references: [id])
  
  topics      Topic[]     // Lista de tópicos (incluindo introdução e tópicos detalhados)
  moduleId    String     // Opcional: para associar o assunto a um módulo específico
  createdAt   DateTime    @default(now()) // Data de criação do assunto
  updatedAt   DateTime    @updatedAt      // Data da última atualização do assunto

  module      StudyModule? @relation(fields: [moduleId], references: [id])
}

model Topic {
  id          String          @id @default(uuid())
  subjectId   String          // Chave estrangeira para Subject
  contentId   String
  content     Content      @relation(fields: [contentId], references: [id])

  subject     Subject         @relation(fields: [subjectId], references: [id])
}

model Quiz {
  id                   String       @id @default(uuid())
  question             String       // Texto da pergunta do quiz
  correctAnswerIndex   Int          // Índice da resposta correta na lista de opções
  options              String[]     // Alternativas para a pergunta
  
  contentId     String
  content       Content @relation(fields: [contentId], references: [id])

  UserQuizProgress     UserQuizProgress[]
}


model StudyPlan {
  id        String       @id @default(uuid())
  userId    String
  moduleId  String
  studyTime Int          
  day       Int          

  user      User         @relation(fields: [userId], references: [id])
  module    StudyModule  @relation(fields: [moduleId], references: [id])
}

model UserQuizProgress {
  id             String   @id @default(uuid())
  userId         String   // Chave estrangeira para o usuário
  quizId         String   // Chave estrangeira para o quiz
  score           Int      // Pontuação obtida no quiz
  attempts        Int      // Número de tentativas realizadas
  completed       Boolean  // Status de conclusão
  completedAt     DateTime? // Data em que o quiz foi concluído

  user            User     @relation(fields: [userId], references: [id])
  quiz            Quiz     @relation(fields: [quizId], references: [id])
}
